# -*- coding: utf-8 -*-
"""generate_cactpot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NqbcU8CxpWU0m1ac3JvAAViqVp0PE7A3
"""

import random

#This seed is to generate the rng seeds to generate inputs
random.seed(1)
randints = []
for i in range(9):
    #According to documentation, randint is a uniform distribution
    if i != 8:
        randints.append(random.randint(0,9-(i+1)))
    else:
        randints.append(random.randint(0,9))

#print(randints)

cactpot_nums = [1,2,3,4,5,6,7,8,9]
#print(cactpot_nums)

#creates both the full cactpot board and the hidden board with one revealed
def create_cactpot(randarr):

    cnums = [1,2,3,4,5,6,7,8,9] #domain of cactpot
    cactpot_f = [] #the full board
    cactpot_h = [0,0,0,0,0,0,0,0,0] #hidden board of 0s, one will be changed

    for i in range(8): #first 8 nums in randarr will generate board
        chosen = cnums.pop(randarr[i]) #pop from cnum so number can't be reused
        #print(randarr[i])
        #print(cnums)
        cactpot_f.append(chosen)
    cactpot_f.append(cnums[0]) #add final number left in cnum to the 9th slot

    r_ind = randarr[8] #last number in randarr chooses which tile to reveal

    #replace position in hidden array with number in that position in full array
    cactpot_h[r_ind] = cactpot_f[r_ind]
    revealed_nums = [cactpot_f[r_ind]]
    tiles_flipped = [r_ind]

    return cactpot_f,cactpot_h,revealed_nums,tiles_flipped

#print(create_cactpot(randints))

random.seed(42)
seedlist = []
for i in range(2000):
    seedlist.append(random.randint(0,10000))

randlist = []



for s in seedlist:
    random.seed(s)
    randints = []
    for i in range(9):
        #According to documentation, randint is a uniform distribution
        if i != 8:
            randints.append(random.randint(0,8-i))
        else:
            randints.append(random.randint(0,8))
    randlist.append(randints)

#print(randlist)

inputdata = []
for r in randlist:
    cp_f,cp_h,r_n,t_f = create_cactpot(r)
    inputdata.append((cp_f,cp_h,r_n,t_f))

#print(inputdata)

def create_seeds(s_init,num_seeds):
    random.seed(s_init)
    slist = []
    for i in range(num_seeds):
        slist.append(random.randint(0,100000))

    return slist

def create_randints(slist):

    rlist = []
    for s in slist:
        random.seed(s)
        rints = []
        for i in range(9):
            #According to documentation, randint is a uniform distribution
            if i != 8:
                rints.append(random.randint(0,8-i))
            else:
                rints.append(random.randint(0,8))
        rlist.append(rints)

    return rlist

def create_input_data(rlist):
    idata = []
    for r in rlist:
        cp_f,cp_h,r_n,t_f = create_cactpot(r)
        idata.append((cp_f,cp_h,r_n,t_f))
    return idata

tslist = create_seeds(42,3000)
trlist = create_randints(tslist)
tinput = create_input_data(trlist)

#print(len(tinput))

tslist2 = create_seeds(6,3000)
trlist2 = create_randints(tslist2)
tinput2 = create_input_data(trlist2)

tslist3 = create_seeds(17,3000)
trlist3 = create_randints(tslist3)
tinput3 = create_input_data(trlist3)

tslist4 = create_seeds(144,3000)
trlist4 = create_randints(tslist4)
tinput4 = create_input_data(trlist4)

tslist5 = create_seeds(190,3000)
trlist5 = create_randints(tslist5)
tinput5 = create_input_data(trlist5)

#print(inputdata[:10])
#print(tinput[:10])
