# -*- coding: utf-8 -*-
"""perfect_cactpot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-y2xWbv5E0hekIgnfRovLXFoA2JgZ2MO
"""

# Commented out IPython magic to ensure Python compatibility.
# %reset

from itertools import permutations
from copy import deepcopy
from generate_cactpot import inputdata

def solver(state, revealed_nums, tiles_flipped):
    rewards = [0, 0, 0, 0, 0, 0, 10000, 36, 720, 360, 80, 252, 108, 72, 54, 180, 72, 180, 119, 36, 306, 1080, 144, 1800, 3600]
    num_options = 9
    num_revealed = len(revealed_nums)
    if num_revealed == 4:
        num_options = 8

    tile_to_flip = [False,False,False,False,False,False,False,False,False]

    if num_revealed == 1:
        value, tile_to_flip = solve_1(state)
    else:
        value, tile_to_flip = solve_1(state, revealed_nums, tiles_flipped)

    #python can't edit inputs without returning them inside functions
    #so will need to adjust that
    return value, tile_to_flip

def solve_any(state, revealed_nums, tiles_flipped):

    rewards = [0, 0, 0, 0, 0, 0, 10000, 36, 720, 360, 80, 252, 108, 72, 54, 180, 72, 180, 119, 36, 306, 1080, 144, 1800, 3600]
    EPS = 0.00001

    if len(revealed_nums) == 4:
        empty_space = range(8)
        tiles = list(range(9))
        domain = [1,2,3,4,5,6,7,8,9]
        fd = []
        ft = []
        options = [False] * 8

        for n in domain:
            #print(n)
            if n in revealed_nums:
                pass
            else:
                fd.append(n)
        for t in tiles:
            #print(t)
            if t in tiles_flipped:
                pass
            else:
                ft.append(t)

        #print(fd)
        #print(ft)

        all_p = list(permutations(fd))
        #print(len(all_p))

        tot_win = [0,0,0,0,0,0,0,0]

        for p in all_p:
            b_state = deepcopy(state)
            #print(p)
            for i in range(len(fd)):
                #print(i)
                #print(ft)
                #print(b_state)
                b_state[ft[i]] = p[i]

            #print(b_state)

            tot_win[0] += rewards[b_state[0] + b_state[1] + b_state[2]]
            tot_win[1] += rewards[b_state[3] + b_state[4] + b_state[5]]
            tot_win[2] += rewards[b_state[6] + b_state[7] + b_state[8]]
            tot_win[3] += rewards[b_state[0] + b_state[3] + b_state[6]]
            tot_win[4] += rewards[b_state[1] + b_state[4] + b_state[7]]
            tot_win[5] += rewards[b_state[2] + b_state[5] + b_state[8]]
            tot_win[6] += rewards[b_state[0] + b_state[4] + b_state[8]]
            tot_win[7] += rewards[b_state[2] + b_state[4] + b_state[6]]

        curmax = 0

        for i in range(len(tot_win)):
            if tot_win[i] > curmax:
                curmax = tot_win[i]
                for j in range(i):
                    options[j] = False
                options[i] = True
            elif tot_win == curmax:
                options[i] = True

        optind = options.index(True)
        #print(tot_win)

        return curmax / len(all_p), optind

    else:
        empty_space = range(8)
        tiles = list(range(9))
        domain = [1,2,3,4,5,6,7,8,9]
        fd = []
        ft = []
        options = [False] * 8

        for n in domain:
            if n not in revealed_nums:
                fd.append(n)
        for t in tiles:
            if t not in tiles_flipped:
                ft.append(t)

        tot_win = [0] * len(ft)
        #print(fd)
        #print(ft)

        for i in range(len(ft)):
            #print("Checking tile " + str(ft[i]))
            for n in fd:
                b_state = deepcopy(state)
                b_rnums = deepcopy(revealed_nums)
                b_tflip = deepcopy(tiles_flipped)

                b_state[ft[i]] = n
                b_rnums.append(n)
                b_tflip.append(ft[i])

                #print(b_state)
                #print(b_rnums)
                #print(b_tflip)


                winnings, opt = solve_any(b_state,b_rnums,b_tflip)

                #print(winnings)
                tot_win[i] += winnings

        curmax = 0
        move = None

        for i in range(len(tot_win)):
            if tot_win[i] > curmax + EPS:
                curmax = tot_win[i]
                move = ft[i]

        #print(tot_win)

        return curmax/(9-len(revealed_nums)), move

def solve_1(state):
    openings ={
        "100000000":[1677.7854166666664,[False,False,True,False,False,False,True,False,False]],
        "200000000":[1665.8127976190476,[False,False,True,False,False,False,True,False,False]],
        "300000000":[1662.504761904762,[False,False,True,False,False,False,True,False,False]],
        "400000000":[1365.0047619047618,[False,False,False,False,True,False,False,False,False]],
        "500000000":[1359.5589285714286,[False,False,False,False,True,False,False,False,False]],
        "600000000":[1364.3044642857142,[False,False,False,False,True,False,False,False,False]],
        "700000000":[1454.5455357142855,[False,False,False,False,True,False,False,False,False]],
        "800000000":[1527.0875,[False,False,True,False,True,False,True,False,False]],
        "900000000":[1517.7214285714285,[False,False,True,False,True,False,True,False,False]],
        "010000000":[1411.3541666666665,[False,False,False,False,True,False,False,False,False]],
        "020000000":[1414.9401785714288,[False,False,False,False,True,False,False,False,False]],
        "030000000":[1406.4190476190477,[False,False,False,False,True,False,False,False,False]],
        "040000000":[1443.3062499999999,[False,False,False,False,False,False,True,False,True]],
        "050000000":[1444.3172619047618,[False,False,False,False,True,False,True,False,True]],
        "060000000":[1441.3663690476192,[False,False,False,False,True,False,False,False,False]],
        "070000000":[1485.6839285714286,[False,False,False,False,True,False,False,False,False]],
        "080000000":[1512.927976190476,[True,False,True,False,False,False,False,False,False]],
        "090000000":[1518.466369047619,[True,False,True,False,False,False,False,False,False]],
        "001000000":[1677.7854166666664,[True,False,False,False,False,False,False,False,True]],
        "002000000":[1665.8127976190476,[True,False,False,False,False,False,False,False,True]],
        "003000000":[1662.504761904762,[True,False,False,False,False,False,False,False,True]],
        "004000000":[1365.0047619047618,[False,False,False,False,True,False,False,False,False]],
        "005000000":[1359.5589285714286,[False,False,False,False,True,False,False,False,False]],
        "006000000":[1364.3044642857142,[False,False,False,False,True,False,False,False,False]],
        "007000000":[1454.5455357142855,[False,False,False,False,True,False,False,False,False]],
        "008000000":[1527.0875,[True,False,False,False,True,False,False,False,True]],
        "009000000":[1517.7214285714285,[True,False,False,False,True,False,False,False,True]],
        "000100000":[1411.3541666666665,[False,False,False,False,True,False,False,False,False]],
        "000200000":[1414.9401785714288,[False,False,False,False,True,False,False,False,False]],
        "000300000":[1406.4190476190477,[False,False,False,False,True,False,False,False,False]],
        "000400000":[1443.3062499999999,[False,False,True,False,False,False,False,False,True]],
        "000500000":[1444.3172619047618,[False,False,True,False,True,False,False,False,True]],
        "000600000":[1441.3663690476192,[False,False,False,False,True,False,False,False,False]],
        "000700000":[1485.6839285714286,[False,False,False,False,True,False,False,False,False]],
        "000800000":[1512.927976190476,[True,False,False,False,False,False,True,False,False]],
        "000900000":[1518.466369047619,[True,False,False,False,False,False,True,False,False]],
        "000010000":[1860.4401785714285,[True,False,True,False,False,False,True,False,True]],
        "000020000":[1832.5413690476191,[True,False,True,False,False,False,True,False,True]],
        "000030000":[1834.179761904762,[True,False,True,False,False,False,True,False,True]],
        "000040000":[1171.9669642857143,[True,False,True,False,False,False,True,False,True]],
        "000050000":[1176.2047619047619,[True,False,True,False,False,False,True,False,True]],
        "000060000":[1234.6142857142856,[True,False,True,False,False,False,True,False,True]],
        "000070000":[1427.3583333333331,[True,False,True,False,False,False,True,False,True]],
        "000080000":[1544.7607142857144,[True,False,True,False,False,False,True,False,True]],
        "000090000":[1509.197619047619,[True,False,True,False,False,False,True,False,True]],
        "000001000":[1411.3541666666665,[False,False,False,False,True,False,False,False,False]],
        "000002000":[1414.9401785714288,[False,False,False,False,True,False,False,False,False]],
        "000003000":[1406.4190476190477,[False,False,False,False,True,False,False,False,False]],
        "000004000":[1443.3062499999999,[True,False,False,False,False,False,True,False,False]],
        "000005000":[1444.3172619047618,[True,False,False,False,True,False,True,False,False]],
        "000006000":[1441.3663690476192,[False,False,False,False,True,False,False,False,False]],
        "000007000":[1485.6839285714286,[False,False,False,False,True,False,False,False,False]],
        "000008000":[1512.927976190476,[False,False,True,False,False,False,False,False,True]],
        "000009000":[1518.466369047619,[False,False,True,False,False,False,False,False,True]],
        "000000100":[1677.7854166666664,[True,False,False,False,False,False,False,False,True]],
        "000000200":[1665.8127976190476,[True,False,False,False,False,False,False,False,True]],
        "000000300":[1662.504761904762,[True,False,False,False,False,False,False,False,True]],
        "000000400":[1365.0047619047618,[False,False,False,False,True,False,False,False,False]],
        "000000500":[1359.5589285714286,[False,False,False,False,True,False,False,False,False]],
        "000000600":[1364.3044642857142,[False,False,False,False,True,False,False,False,False]],
        "000000700":[1454.5455357142855,[False,False,False,False,True,False,False,False,False]],
        "000000800":[1527.0875,[True,False,False,False,True,False,False,False,True]],
        "000000900":[1517.7214285714285,[True,False,False,False,True,False,False,False,True]],
        "000000010":[1411.3541666666665,[False,False,False,False,True,False,False,False,False]],
        "000000020":[1414.9401785714288,[False,False,False,False,True,False,False,False,False]],
        "000000030":[1406.4190476190477,[False,False,False,False,True,False,False,False,False]],
        "000000040":[1443.3062499999999,[True,False,True,False,False,False,False,False,False]],
        "000000050":[1444.3172619047618,[True,False,True,False,True,False,False,False,False]],
        "000000060":[1441.3663690476192,[False,False,False,False,True,False,False,False,False]],
        "000000070":[1485.6839285714286,[False,False,False,False,True,False,False,False,False]],
        "000000080":[1512.927976190476,[False,False,False,False,False,False,True,False,True]],
        "000000090":[1518.466369047619,[False,False,False,False,False,False,True,False,True]],
        "000000001":[1677.7854166666664,[False,False,True,False,False,False,True,False,False]],
        "000000002":[1665.8127976190476,[False,False,True,False,False,False,True,False,False]],
        "000000003":[1662.504761904762,[False,False,True,False,False,False,True,False,False]],
        "000000004":[1365.0047619047618,[False,False,False,False,True,False,False,False,False]],
        "000000005":[1359.5589285714286,[False,False,False,False,True,False,False,False,False]],
        "000000006":[1364.3044642857142,[False,False,False,False,True,False,False,False,False]],
        "000000007":[1454.5455357142855,[False,False,False,False,True,False,False,False,False]],
        "000000008":[1527.0875,[False,False,True,False,True,False,True,False,False]],
        "000000009":[1517.7214285714285,[False,False,True,False,True,False,True,False,False]]
    }

    strints = [str(i) for i in state]
    statestr = ''.join(strints)
    #print(statestr)
    value, opt = openings[statestr]
    optind = opt.index(True)
    return value, optind

'''
t_state = [3,0,0,1,8,0,6,0,0]
t_rnums = [3,1,8,6]
t_tflip = [0,3,4,6]

t_res, t_opt = solve_any(t_state, t_rnums, t_tflip)
print(t_res)
print(t_opt)

t_state = [3,0,0,1,8,0,0,0,0]
t_rnums = [3,1,8]
t_tflip = [0,3,4]

t_res, t_opt = solve_any(t_state, t_rnums, t_tflip)
print(t_res)
print(t_opt)

t_state = [3,0,0,1,8,0,0,0,0]
t_rnums = [3,1,8]
t_tflip = [0,3,4]

t_res, t_opt = solve_any(t_state, t_rnums, t_tflip)
print(t_res)
print(t_opt)

t_state = [0,0,0,1,8,0,0,0,0]
t_rnums = [1,8]
t_tflip = [3,4]

t_res, t_opt = solve_any(t_state, t_rnums, t_tflip)
print(t_res)
print(t_opt)

t_state = [0,0,0,1,0,0,0,0,0]
t_rnums = [1]
t_tflip = [4]

t_res, t_opt = solve_1(t_state)
print(t_res)
print(t_opt)

t_state = [4,0,0,0,7,0,0,0,0]
t_rnums = [4,7]
t_tflip = [0,4]

t_res, t_opt = solve_any(t_state, t_rnums, t_tflip)
print(t_res)
print(t_opt)
'''

def play_board(state, r_state, r_nums, t_flip):

    rewards = [0, 0, 0, 0, 0, 0, 10000, 36, 720, 360, 80, 252, 108, 72, 54, 180, 72, 180, 119, 36, 306, 1080, 144, 1800, 3600]
    #print(state)

    t_res1, t_flip1 = solve_1(state)
    #print(t_flip1)
    state[t_flip1] = r_state[t_flip1]
    r_nums.append(state[t_flip1])
    t_flip.append(t_flip1)
    #print(state)
    #print(r_nums)
    #print(t_flip)

    t_res2, t_flip2 = solve_any(state, r_nums, t_flip)
    state[t_flip2] = r_state[t_flip2]
    #print(t_flip2)
    r_nums.append(state[t_flip2])
    t_flip.append(t_flip2)
    #print(state)
    #print(r_nums)
    #print(t_flip)

    t_res3, t_flip3 = solve_any(state, r_nums, t_flip)
    state[t_flip3] = r_state[t_flip3]
    #print(t_flip3)
    r_nums.append(state[t_flip3])
    t_flip.append(t_flip3)
    #print(state)
    #print(r_nums)
    #print(t_flip)

    t_res4, option = solve_any(state, r_nums, t_flip)

    #print(option)

    result = 0
    fsum = 0

    if option == 0:
        fsum = r_state[0] + r_state[1] + r_state[2]
        result = rewards[fsum]
    if option == 1:
        fsum = r_state[3] + r_state[4] + r_state[5]
        result = rewards[fsum]
    if option == 2:
        fsum = r_state[6] + r_state[7] + r_state[8]
        result = rewards[fsum]
    if option == 3:
        fsum = r_state[0] + r_state[3] + r_state[6]
        result = rewards[fsum]
    if option == 4:
        fsum = r_state[1] + r_state[4] + r_state[7]
        result = rewards[fsum]
    if option == 5:
        fsum = r_state[2] + r_state[5] + r_state[8]
        result = rewards[fsum]
    if option == 6:
        fsum = r_state[0] + r_state[4] + r_state[8]
        result = rewards[fsum]
    if option == 7:
        fsum = r_state[2] + r_state[4] + r_state[6]
        result = rewards[fsum]

    return result, fsum

t_state = [0,0,0,1,0,0,0,0,0]
real_state = [3, 2, 5, 1, 8, 9, 6, 7, 4]
t_rnums = [1]
t_tflip = [3]

def play_board_Y(state, r_state, r_nums, t_flip):
    rewards = [0, 0, 0, 0, 0, 0, 10000, 36, 720, 360, 80, 252, 108, 72, 54, 180, 72, 180, 119, 36, 306, 1080, 144, 1800, 3600]

    three_to_flip = []
    if t_flip[0] == 0:
        three_to_flip = [4,5,7]
    elif t_flip[0] == 1:
        three_to_flip = [4,6,8]
    elif t_flip[0] == 2:
        three_to_flip = [4,3,7]
    elif t_flip[0] == 3:
        three_to_flip = [4,2,8]
    elif t_flip[0] == 4:
        three_to_flip = [0,7,2]
    elif t_flip[0] == 5:
        three_to_flip = [4,0,6]
    elif t_flip[0] == 6:
        three_to_flip = [4,1,5]
    elif t_flip[0] == 7:
        three_to_flip = [4,0,2]
    else:
        three_to_flip = [4,1,3]

    '''
    print("Before flipping")
    print(state)
    print(t_flip)
    print(r_nums)
    '''

    for f in three_to_flip:
        state[f] = r_state[f]
        r_nums.append(state[f])
        t_flip.append(f)

    '''
    print("After flipping")
    print(state)
    print(t_flip)
    print(r_nums)
    '''

    #print(state)
    #print(r_state)
    #print(r_nums)
    #print(t_flip)

    t_res4, option = solve_any(state, r_nums, t_flip)

    #print(option)

    result = 0
    fsum = 0

    if option == 0:
        fsum = r_state[0] + r_state[1] + r_state[2]
        result = rewards[fsum]
    if option == 1:
        fsum = r_state[3] + r_state[4] + r_state[5]
        result = rewards[fsum]
    if option == 2:
        fsum = r_state[6] + r_state[7] + r_state[8]
        result = rewards[fsum]
    if option == 3:
        fsum = r_state[0] + r_state[3] + r_state[6]
        result = rewards[fsum]
    if option == 4:
        fsum = r_state[1] + r_state[4] + r_state[7]
        result = rewards[fsum]
    if option == 5:
        fsum = r_state[2] + r_state[5] + r_state[8]
        result = rewards[fsum]
    if option == 6:
        fsum = r_state[0] + r_state[4] + r_state[8]
        result = rewards[fsum]
    if option == 7:
        fsum = r_state[2] + r_state[4] + r_state[6]
        result = rewards[fsum]

    return result, fsum

#print(play_board_Y(t_state, real_state, t_rnums, t_tflip))

#print(play_board(t_state, real_state, t_rnums, t_tflip))

#len(inputdata)
